import sys
import socket
import selectors
import types

sel = selectors.DefaultSelector()
messages = [b"Message 1 from client.", b"Message 2 from client."]
sockets = []  # List to store socket objects


def start_connections(host, port, num_conns):
    server_addr = (host, port)
    for i in range(0, num_conns):
        connid = i + 1
        print(f"Starting connection {connid} to {server_addr}")
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setblocking(False)

        # You use .connect_ex() instead of .connect() because .connect() would immediately raise a BlockingIOError
        # exception. The .connect_ex() method initially returns an error indicator, errno.EINPROGRESS,
        # instead of raising an exception that would interfere with the connection in progress.
        # we need this connect to multiple clients at the same time
        sock.connect_ex(server_addr)

        events = selectors.EVENT_READ | selectors.EVENT_WRITE
        data = types.SimpleNamespace(
            connid=connid,
            msg_total=sum(len(m) for m in messages),
            recv_total=0,
            messages=messages.copy(),
            outb=b"",
        )
        sel.register(sock, events, data=data)
        sockets.append(sock)  # Store socket object in the list


def service_connection(key, mask):
    sock = key.fileobj
    data = key.data
    sentence = input("Input lowercase sentence:")
    sock.send(sentence.encode()) 
    if mask & selectors.EVENT_READ:
            try:
                recv_data = sock.recv(1024)
            except BlockingIOError:
                # No data available to read at the moment, continue with other tasks
                return
            except Exception as e:
                print(f"Error receiving data from server: {e}")
                recv_data = None

            if recv_data:
                print(f"Received {recv_data.decode()} from connection {data.connid}")
                data.recv_total += len(recv_data)

    if mask & selectors.EVENT_WRITE:
        if data.messages:
            data.outb = data.messages.pop(0)
        if data.outb:
            print(f"Sending {data.outb.decode()} to connection {data.connid}")
            try:
                sent = sock.send(data.outb)
            except BlockingIOError:
                # Socket is not ready for writing, continue with other tasks
                pass
            except Exception as e:
                print(f"Error sending data to server: {e}")
                sent = 0

            data.outb = data.outb[sent:]

    if not data.messages and not data.outb:
        # If there are no more messages to send and no outgoing data in the buffer,
        # we can unregister and close the connection.
        print(f"Closing connection {data.connid}")
        sel.unregister(sock)
        sock.close()

    if mask & selectors.EVENT_WRITE:
        if not data.outb and data.messages:
            data.outb = data.messages.pop(0)
        if data.outb:
            print(f"Sending {data.outb!r} to connection {data.connid}")
            sent = sock.send(data.outb)  # Should be ready to write
            data.outb = data.outb[sent:]


if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} <host> <port> <num_connections>")
    sys.exit(1)

host, port, num_conns = sys.argv[1:4]
start_connections(host, int(port), int(num_conns))

try:
    while True:
        events = sel.select(timeout=1)
        if events:
            for key, mask in events:
                service_connection(key, mask)
        # Check for a socket being monitored to continue.
        if not sel.get_map():
            break
except KeyboardInterrupt:
    print("Caught keyboard interrupt, exiting")
finally:
    sel.close()
